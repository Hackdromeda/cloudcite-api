temp:     /**
    @param sys JavaScript object that provides the functions retrieveLocale() and retrieveItem()
    @param style CSL style as serialized XML
    */

    //Example Test/Values Passed In: https://github.com/citation-style-language/schema/blob/master/csl-data.json
    var sys = {
        /**
        @param cslUS locale
        fetches CSL EN-US
        @return value from US locale or returns false
        */
        retrieveLocale: (cslUS) => {
            try {
                const locale = fs.readFileSync("./locales-en-US.xml");
                return locale;
            }
            catch (error) {
                console.log("Error: " + error);
                return false;
            }
        },
        /**
        @param citationID citation ID
        takes citation ID as input and returns   
        @return JavaScript object in CSL-JSON format          
        */
       retrieveItem: function(itemID){
           return items[itemID];
        }
    }
    /*
    citationItems: {
            id: 'Item-X' // A work by Richard Snoakes
        }
    */

    let reqItemIDs = (typeof request.itemIDs == 'undefined') ? [] : request.itemIDs;
    let items = request.items;

    // Initialize the hash/order ID of all items. It will either have been given directly in the POST data, or else make a hash out of the posted array.
    let reqItemsObj;
    if (items instanceof Array) {
        reqItemsObj = {};
        for (let i = 0; i < items.length; i++){
            let item = items[i];
            let id = item['id'];
            reqItemsObj[id] = item;
            if (typeof request.itemIDs == 'undefined'){
                reqItemIDs.push(id);
            }
        }
    }
    else if (typeof items == 'object'){
        reqItemsObj = request.items;
        for (let id in reqItemsObj){
            if (reqItemsObj.hasOwnProperty(id)) {
                if (reqItemsObj[id].id != id) {
                    throw "Item ID did not match items object key";
                }
                reqItemIDs.push(id);
            }
        }
    }
    else {
        throw "Can't decipher items in POST data";
    }

    // Add citationItems if not defined in request
    let citationClusters;
    if (citations == '1') {
        if (request.citationClusters) {
            citationClusters = request.citationClusters;
        }
        else {
            citationClusters = [];
            for (let i = 0; i < reqItemIDs.length; i++){
                let itemid = reqItemIDs[i];
                citationClusters.push(
                    { 
                        "citationItems": [
                            { id: itemid }
                        ],
                        "properties": {
                            "noteIndex": i
                        }
                    }
                );
            }
        }
}

var engine = new CSL.Engine(sys, style);
engine.updateItems(Object.keys(items));
var bib = engine.makeBibliography();